/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/documents/": {
    /**
     * List Documents
     * @description List all documents with their basic information
     */
    get: operations["list_documents_v1_documents__get"];
    /**
     * Upload Document
     * @description Upload a document and create embeddings
     */
    post: operations["upload_document_v1_documents__post"];
  };
  "/v1/documents/{document_id}": {
    /**
     * Get Document Info
     * @description Get metadata and basic stats for a document
     */
    get: operations["get_document_info_v1_documents__document_id__get"];
    /**
     * Delete Document
     * @description Delete a document and its vectors
     */
    delete: operations["delete_document_v1_documents__document_id__delete"];
    /**
     * Update Document
     * @description Replace a document and re-index vectors
     */
    patch: operations["update_document_v1_documents__document_id__patch"];
  };
  "/v1/documents/{document_id}/status": {
    /**
     * Get Document Processing Status
     * @description Get real-time processing status for a document
     */
    get: operations["get_document_status_v1_documents__document_id__status_get"];
  };
  "/v1/documents/crawl": {
    /**
     * Crawl Website
     * @description Crawl a website and index its content as documents
     */
    post: operations["crawl_website_v1_documents_crawl_post"];
  };
  "/v1/documents/website/{document_id}": {
    /**
     * Delete Crawled Website
     * @description Delete a crawled website and its vectors by document ID
     */
    delete: operations["delete_crawled_website_v1_documents_website__document_id__delete"];
  };
  "/v1/chat/": {
    /**
     * Chat with AI Assistant
     * @description Chat endpoint with optional streaming and RAG context
     */
    post: operations["chat_v1_chat__post"];
  };
  "/v1/chat/conversations/{user_id}": {
    /**
     * Get User Conversations
     * @description Get all conversations for a user
     */
    get: operations["get_user_conversations_v1_chat_conversations__user_id__get"];
  };
  "/v1/chat/conversations/{user_id}/{conversation_id}/history": {
    /**
     * Get Conversation History
     * @description Get conversation history (messages)
     */
    get: operations["get_conversation_history_v1_chat_conversations__user_id___conversation_id__history_get"];
  };
  "/v1/agents/walrus": {
    /**
     * List WalrusAgents
     * @description List all WalrusAgents
     */
    get: operations["list_walrus_agents_v1_agents_walrus_get"];
    /**
     * Create WalrusAgent
     * @description Create a new WalrusAgent with generated description
     */
    post: operations["create_walrus_agent_v1_agents_walrus_post"];
  };
  "/v1/agents/walrus/{agent_id}": {
    /**
     * Get WalrusAgent
     * @description Get a specific WalrusAgent by ID
     */
    get: operations["get_walrus_agent_v1_agents_walrus__agent_id__get"];
    /**
     * Update WalrusAgent
     * @description Update an existing WalrusAgent
     */
    put: operations["update_walrus_agent_v1_agents_walrus__agent_id__put"];
    /**
     * Delete WalrusAgent
     * @description Delete a WalrusAgent
     */
    delete: operations["delete_walrus_agent_v1_agents_walrus__agent_id__delete"];
  };
  "/v1/agents/walrus/search": {
    /**
     * Search WalrusAgents
     * @description Search WalrusAgents using Claude-based selection
     */
    post: operations["search_walrus_agents_v1_agents_walrus_search_post"];
  };
  "/v1/agents/cards": {
    /**
     * List Agent Cards (Legacy)
     * @description List agent cards with optional filtering
     */
    get: operations["list_agent_cards_v1_agents_cards_get"];
    /**
     * Create Agent Card (Legacy)
     * @description Create a new agent card (legacy endpoint for UI compatibility)
     */
    post: operations["create_agent_card_v1_agents_cards_post"];
  };
  "/v1/agents/tools": {
    /**
     * List Available Tools
     * @description List all available tools that can be assigned to agents
     */
    get: operations["list_available_tools_v1_agents_tools_get"];
  };
  "/v1/agents/sources": {
    /**
     * List Available Sources
     * @description List all available sources that can be assigned to agents
     */
    get: operations["list_available_sources_v1_agents_sources_get"];
  };
  "/v1/mega_chat/": {
    /**
     * Execute Mega Chat
     * @description Run complex queries using multiple specialized agents with automatic selection and synthesis
     */
    post: operations["mega_chat_v1_mega_chat__post"];
  };
  "/v1/mega_chat/sessions/{session_id}/status": {
    /**
     * Get Session Status
     * @description Get status of a specific mega chat session
     */
    get: operations["get_session_status_v1_mega_chat_sessions__session_id__status_get"];
  };
  "/v1/mega_chat/health": {
    /**
     * Mega Chat Health Check
     * @description Check the health and status of the multi-agent system
     */
    get: operations["health_check_v1_mega_chat_health_get"];
  };
  "/v1/sqlite/tables": {
    /**
     * Get SQLite Tables
     * @description Get information about all SQLite tables
     */
    get: operations["get_sqlite_tables_v1_sqlite_tables_get"];
  };
  "/v1/sqlite/tables/{table_name}": {
    /**
     * Get Table Info
     * @description Get detailed information about a specific table
     */
    get: operations["get_table_info_v1_sqlite_tables__table_name__get"];
  };
  "/v1/sqlite/query": {
    /**
     * Execute SQL Query
     * @description Execute a SQL query and return results
     */
    post: operations["execute_query_v1_sqlite_query_post"];
  };
  "/v1/models/": {
    /**
     * Get Available Models
     * @description Get information about available AI models
     */
    get: operations["get_models_v1_models__get"];
  };
  "/v1/models/{model_id}": {
    /**
     * Get Model Info
     * @description Get information about a specific model
     */
    get: operations["get_model_v1_models__model_id__get"];
  };
  "/": {
    /**
     * Root
     * @description Root endpoint with API information
     */
    get: operations["root__get"];
  };
  "/health": {
    /**
     * Health Check
     * @description Health check endpoint
     */
    get: operations["health_check_health_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DocumentMetadata: {
      /** Format: uuid */
      document_id?: string;
      /** @enum {string} */
      document_type?: "file_upload" | "web_crawl";
      /** Format: date-time */
      created_at?: string;
      chunks_created?: number;
      total_tokens?: number;
      status?: string;
      filename?: string;
      file_type?: string;
      url?: string;
      crawl_depth?: number;
      crawl_pages?: number;
    };
    WebCrawlRequest: {
      /** Format: uri */
      url: string;
      /**
       * @description Maximum crawling depth (1=root only, 2=root+links, 3+=recursive)
       * @default 1
       */
      max_depth?: number;
      /**
       * @description Maximum number of pages to crawl (supports up to 10,000 pages)
       * @default 5
       */
      max_pages?: number;
    };
    WebCrawlResponse: {
      /** Format: uuid */
      document_id?: string;
      url?: string;
      chunks_created?: number;
      total_tokens?: number;
      crawl_depth?: number;
      crawl_pages?: number;
      status?: string;
    };
    ChatRequest: {
      /** @description The user's chat message or question */
      query: string;
      /** @description Unique session identifier for conversation tracking */
      session_id: string;
      /**
       * @description Number of relevant context chunks to retrieve
       * @default 8
       */
      retrieval_k?: number;
      /** @description Optional filters for context retrieval */
      retrieval_filter?: Record<string, never>;
      /**
       * @description Whether to stream the response or return complete response
       * @default true
       */
      stream?: boolean;
    };
    ChatResponse: {
      response: string;
      session_id: string;
      metadata?: Record<string, never>;
    };
    CreateWalrusAgentRequest: {
      /** @description Unique agent ID */
      id: string;
      /** @description Human-readable agent name */
      name: string;
      /** @description SQLite tables (≤ 4) */
      sqlite_tables?: string[];
      /** @description Vector-store doc IDs */
      docs?: string[];
      /** @description Crawled root URLs */
      websites?: string[];
      /** @description External tool names (≤ 2) */
      api_calls?: string[];
    };
    UpdateWalrusAgentRequest: {
      /** @description Human-readable agent name */
      name?: string;
      /** @description SQLite tables (≤ 4) */
      sqlite_tables?: string[];
      /** @description Vector-store doc IDs */
      docs?: string[];
      /** @description Crawled root URLs */
      websites?: string[];
      /** @description External tool names (≤ 2) */
      api_calls?: string[];
    };
    WalrusAgentResponse: {
      id?: string;
      name?: string;
      sqlite_tables?: string[];
      docs?: string[];
      websites?: string[];
      api_calls?: string[];
      /** @description Generated 250-word description */
      description?: string;
    };
    CreateAgentCardRequest: {
      name: string;
      description: string;
      allowed_tools?: string[];
      allowed_sources?: string[];
      config?: Record<string, never>;
      tags?: string[];
      /** @default 1 */
      priority?: number;
      created_by?: string;
    };
    AgentCardResponse: {
      id?: string;
      name?: string;
      description?: string;
      allowed_tools?: string[];
      allowed_sources?: string[];
      config?: Record<string, never>;
      status?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      created_by?: string;
      tags?: string[];
      priority?: number;
      metadata?: Record<string, never>;
    };
    AgentCardListResponse: {
      cards?: components["schemas"]["AgentCardResponse"][];
      total_count?: number;
      last_evaluated_key?: Record<string, never>;
    };
    SearchAgentCardsRequest: {
      /** @description Search query */
      query: string;
      /**
       * @description Number of results
       * @default 5
       */
      k?: number;
      /**
       * @description Minimum similarity score
       * @default 0.75
       */
      score_threshold?: number;
      /**
       * @description Filter by status
       * @enum {string}
       */
      status_filter?: "active" | "inactive";
    };
    SearchAgentCardsResponse: {
      candidates?: Record<string, never>[];
      total_found?: number;
      query?: string;
    };
    MegaChatRequest: {
      /** @description User query to process */
      query: string;
      /** @description Specific agent IDs to use (null for auto-selection) */
      agent_ids?: string[];
      /**
       * @description Enable streaming response
       * @default true
       */
      stream?: boolean;
      /**
       * @description Maximum agents to use (1-5)
       * @default 3
       */
      max_agents?: number;
      /**
       * @description Selection strategy
       * @default auto
       * @enum {string}
       */
      strategy?: "auto" | "single_best" | "parallel";
      /**
       * @description Synthesis strategy
       * @default auto
       * @enum {string}
       */
      synthesis_strategy?: "auto" | "merge" | "best" | "consensus";
    };
    MegaChatResponse: {
      session_id?: string;
      final_answer?: string;
      agents_used?: Record<string, never>[];
      tools_used?: string[];
      sources_used?: string[];
      execution_summary?: Record<string, never>;
      total_time_ms?: number;
    };
    TableInfo: {
      name?: string;
      columns?: components["schemas"]["ColumnInfo"][];
      row_count?: number;
      created_at?: string;
    };
    ColumnInfo: {
      name?: string;
      type?: string;
      nullable?: boolean;
      default?: string;
      primary_key?: boolean;
    };
    QueryRequest: {
      /** @description SQL query to execute */
      query: string;
      /** @default 100 */
      limit?: number;
    };
    QueryResponse: {
      columns?: string[];
      rows?: unknown[][];
      row_count?: number;
      total_count?: number;
    };
    ModelInfo: {
      id?: string;
      name?: string;
      provider?: string;
      type?: string;
      max_tokens?: number;
      description?: string;
      capabilities?: string[];
    };
    HTTPValidationError: {
      detail?: components["schemas"]["ValidationError"][];
    };
    ValidationError: {
      loc: (string | number)[];
      msg: string;
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List Documents
   * @description List all documents with their basic information
   */
  list_documents_v1_documents__get: {
    parameters: {
      query?: {
        document_type?: "file_upload" | "web_crawl";
      };
    };
    responses: {
      /** @description List of documents */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentMetadata"][];
        };
      };
    };
  };
  /**
   * Upload Document
   * @description Upload a document and create embeddings
   */
  upload_document_v1_documents__post: {
    parameters: {
      header: {
        "content-length": number;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description Document uploaded successfully */
      201: {
        content: {
          "application/json": {
            /** Format: uuid */
            document_id?: string;
            filename?: string;
            chunks_created?: number;
            total_tokens?: number;
            status?: string;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Document Info
   * @description Get metadata and basic stats for a document
   */
  get_document_info_v1_documents__document_id__get: {
    parameters: {
      path: {
        document_id: string;
      };
    };
    responses: {
      /** @description Document information */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentMetadata"];
        };
      };
    };
  };
  /**
   * Delete Document
   * @description Delete a document and its vectors
   */
  delete_document_v1_documents__document_id__delete: {
    parameters: {
      path: {
        document_id: string;
      };
    };
    responses: {
      /** @description Document deleted successfully */
      200: {
        content: never;
      };
    };
  };
  /**
   * Update Document
   * @description Replace a document and re-index vectors
   */
  update_document_v1_documents__document_id__patch: {
    parameters: {
      header: {
        "content-length": number;
      };
      path: {
        document_id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description Document updated successfully */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Document Processing Status
   * @description Get real-time processing status for a document
   */
  get_document_status_v1_documents__document_id__status_get: {
    parameters: {
      path: {
        document_id: string;
      };
    };
    responses: {
      /** @description Document processing status */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            processing_status?: "processing" | "completed" | "failed";
            processing_step?: string;
            progress_percentage?: number;
            status_message?: string;
            /** Format: date-time */
            updated_at?: string;
            status_metadata?: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Crawl Website
   * @description Crawl a website and index its content as documents
   */
  crawl_website_v1_documents_crawl_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebCrawlRequest"];
      };
    };
    responses: {
      /** @description Website crawling initiated */
      201: {
        content: {
          "application/json": components["schemas"]["WebCrawlResponse"];
        };
      };
    };
  };
  /**
   * Delete Crawled Website
   * @description Delete a crawled website and its vectors by document ID
   */
  delete_crawled_website_v1_documents_website__document_id__delete: {
    parameters: {
      path: {
        document_id: string;
      };
    };
    responses: {
      /** @description Website deleted successfully */
      200: {
        content: never;
      };
    };
  };
  /**
   * Chat with AI Assistant
   * @description Chat endpoint with optional streaming and RAG context
   */
  chat_v1_chat__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description Chat response (streaming or complete) */
      200: {
        content: {
          "application/json": components["schemas"]["ChatResponse"];
          "text/event-stream": string;
        };
      };
    };
  };
  /**
   * Get User Conversations
   * @description Get all conversations for a user
   */
  get_user_conversations_v1_chat_conversations__user_id__get: {
    parameters: {
      query?: {
        limit?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description User conversations */
      200: {
        content: {
          "application/json": {
            user_id?: string;
            conversations?: Record<string, never>[];
            total?: number;
          };
        };
      };
    };
  };
  /**
   * Get Conversation History
   * @description Get conversation history (messages)
   */
  get_conversation_history_v1_chat_conversations__user_id___conversation_id__history_get: {
    parameters: {
      query?: {
        limit?: number;
      };
      path: {
        user_id: string;
        conversation_id: string;
      };
    };
    responses: {
      /** @description Conversation history */
      200: {
        content: {
          "application/json": {
            conversation_id?: string;
            user_id?: string;
            messages?: Record<string, never>[];
          };
        };
      };
    };
  };
  /**
   * List WalrusAgents
   * @description List all WalrusAgents
   */
  list_walrus_agents_v1_agents_walrus_get: {
    responses: {
      /** @description List of WalrusAgents */
      200: {
        content: {
          "application/json": components["schemas"]["WalrusAgentResponse"][];
        };
      };
    };
  };
  /**
   * Create WalrusAgent
   * @description Create a new WalrusAgent with generated description
   */
  create_walrus_agent_v1_agents_walrus_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWalrusAgentRequest"];
      };
    };
    responses: {
      /** @description WalrusAgent created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["WalrusAgentResponse"];
        };
      };
    };
  };
  /**
   * Get WalrusAgent
   * @description Get a specific WalrusAgent by ID
   */
  get_walrus_agent_v1_agents_walrus__agent_id__get: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** @description WalrusAgent details */
      200: {
        content: {
          "application/json": components["schemas"]["WalrusAgentResponse"];
        };
      };
    };
  };
  /**
   * Update WalrusAgent
   * @description Update an existing WalrusAgent
   */
  update_walrus_agent_v1_agents_walrus__agent_id__put: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWalrusAgentRequest"];
      };
    };
    responses: {
      /** @description WalrusAgent updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalrusAgentResponse"];
        };
      };
    };
  };
  /**
   * Delete WalrusAgent
   * @description Delete a WalrusAgent
   */
  delete_walrus_agent_v1_agents_walrus__agent_id__delete: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** @description WalrusAgent deleted successfully */
      204: {
        content: never;
      };
    };
  };
  /**
   * Search WalrusAgents
   * @description Search WalrusAgents using Claude-based selection
   */
  search_walrus_agents_v1_agents_walrus_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchAgentCardsRequest"];
      };
    };
    responses: {
      /** @description Search results */
      200: {
        content: {
          "application/json": components["schemas"]["SearchAgentCardsResponse"];
        };
      };
    };
  };
  /**
   * List Agent Cards (Legacy)
   * @description List agent cards with optional filtering
   */
  list_agent_cards_v1_agents_cards_get: {
    parameters: {
      query?: {
        status_filter?: "active" | "inactive" | "draft";
        limit?: number;
        last_evaluated_key?: string;
      };
    };
    responses: {
      /** @description List of agent cards */
      200: {
        content: {
          "application/json": components["schemas"]["AgentCardListResponse"];
        };
      };
    };
  };
  /**
   * Create Agent Card (Legacy)
   * @description Create a new agent card (legacy endpoint for UI compatibility)
   */
  create_agent_card_v1_agents_cards_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAgentCardRequest"];
      };
    };
    responses: {
      /** @description Agent card created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AgentCardResponse"];
        };
      };
    };
  };
  /**
   * List Available Tools
   * @description List all available tools that can be assigned to agents
   */
  list_available_tools_v1_agents_tools_get: {
    responses: {
      /** @description List of available tools */
      200: {
        content: {
          "application/json": {
              name?: string;
              description?: string;
              category?: string;
              examples?: string[];
            }[];
        };
      };
    };
  };
  /**
   * List Available Sources
   * @description List all available sources that can be assigned to agents
   */
  list_available_sources_v1_agents_sources_get: {
    responses: {
      /** @description List of available sources */
      200: {
        content: {
          "application/json": {
              name?: string;
              source_type?: string;
              description?: string;
              capabilities?: string[];
            }[];
        };
      };
    };
  };
  /**
   * Execute Mega Chat
   * @description Run complex queries using multiple specialized agents with automatic selection and synthesis
   */
  mega_chat_v1_mega_chat__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MegaChatRequest"];
      };
    };
    responses: {
      /** @description Mega chat response (streaming or complete) */
      200: {
        content: {
          "application/json": components["schemas"]["MegaChatResponse"];
          "text/event-stream": string;
        };
      };
    };
  };
  /**
   * Get Session Status
   * @description Get status of a specific mega chat session
   */
  get_session_status_v1_mega_chat_sessions__session_id__status_get: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Session status */
      200: {
        content: {
          "application/json": {
            session_id?: string;
            /** @enum {string} */
            status?: "active" | "completed" | "failed";
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            completed_at?: string;
            agents_used?: number;
            total_time_ms?: number;
            success?: boolean;
          };
        };
      };
    };
  };
  /**
   * Mega Chat Health Check
   * @description Check the health and status of the multi-agent system
   */
  health_check_v1_mega_chat_health_get: {
    responses: {
      /** @description Health status */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            status?: "healthy" | "degraded" | "unhealthy";
            services?: Record<string, never>;
            active_sessions?: number;
            total_executions?: number;
          };
        };
      };
    };
  };
  /**
   * Get SQLite Tables
   * @description Get information about all SQLite tables
   */
  get_sqlite_tables_v1_sqlite_tables_get: {
    responses: {
      /** @description List of SQLite tables */
      200: {
        content: {
          "application/json": components["schemas"]["TableInfo"][];
        };
      };
    };
  };
  /**
   * Get Table Info
   * @description Get detailed information about a specific table
   */
  get_table_info_v1_sqlite_tables__table_name__get: {
    parameters: {
      path: {
        table_name: string;
      };
    };
    responses: {
      /** @description Table information */
      200: {
        content: {
          "application/json": components["schemas"]["TableInfo"];
        };
      };
    };
  };
  /**
   * Execute SQL Query
   * @description Execute a SQL query and return results
   */
  execute_query_v1_sqlite_query_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryRequest"];
      };
    };
    responses: {
      /** @description Query results */
      200: {
        content: {
          "application/json": components["schemas"]["QueryResponse"];
        };
      };
    };
  };
  /**
   * Get Available Models
   * @description Get information about available AI models
   */
  get_models_v1_models__get: {
    responses: {
      /** @description List of available models */
      200: {
        content: {
          "application/json": components["schemas"]["ModelInfo"][];
        };
      };
    };
  };
  /**
   * Get Model Info
   * @description Get information about a specific model
   */
  get_model_v1_models__model_id__get: {
    parameters: {
      path: {
        model_id: string;
      };
    };
    responses: {
      /** @description Model information */
      200: {
        content: {
          "application/json": components["schemas"]["ModelInfo"];
        };
      };
    };
  };
  /**
   * Root
   * @description Root endpoint with API information
   */
  root__get: {
    responses: {
      /** @description API information */
      200: {
        content: {
          "application/json": {
            name?: string;
            version?: string;
            status?: string;
            endpoints?: Record<string, never>;
            features?: string[];
          };
        };
      };
    };
  };
  /**
   * Health Check
   * @description Health check endpoint
   */
  health_check_health_get: {
    responses: {
      /** @description Health status */
      200: {
        content: {
          "application/json": {
            status?: string;
            version?: string;
          };
        };
      };
    };
  };
}
